{
    "converted": false,
    "GoldenConversations": "{site: amzn1.ask.skill.82c72524-1649-4b41-a4c5-6824d1049c00}\n\n{dialogName: RequestVolunteerOnce0}\n{start}\nU: necesito un voluntario\nU: { userNlg: USetRequestVolunteer0() }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestServiceResponse(),arguments=[service]}]) }\nA: para qué servicio\nU: un [perro guía|service -> service0]\nU: { userNlg: USetInformService(service=$service0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=PeriodicityResponse(),arguments=[once]}]) }\nA: por única vez o recurrente\nU: [por única vez|once -> singleService0]\nU: { userNlg: USetInformOnce(once=$singleService0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDateResponse(),arguments=[date]}]) }\nA: cuándo?\nU: [mañana|AMAZON.DATE -> date0]\nU: { userNlg: USetInformDate(date=$date0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [10 a m|AMAZON.TIME -> starttime0]\nU: { userNlg: USetInformTime(time=$starttime0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo\nU: [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$starttime0, service=$service0, once=$singleService0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse0)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse0), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse1)) }\nA: El voluntario fue solicitado.\n{end}\n\n{dialogName: RequestVolunteerOnce1}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0]\nU: { userNlg: USetRequestVolunteer1(service=$service0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=PeriodicityResponse(),arguments=[once]}]) }\nA: por única vez o recurrente?\nU: [por única vez|once -> once0]\nU: { userNlg: USetInformOnce(once=$once0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDateResponse(),arguments=[date]}]) }\nA: cuándo?\nU: el [25 de septiembre|AMAZON.DATE -> date0]\nU: { userNlg: USetInformDate(date=$date0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [10 de la mañana|AMAZON.TIME -> starttime0]\nU: { userNlg: USetInformTime(time=$starttime0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [dos horas|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$starttime0, service=$service0, once=$once0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse0)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse0), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse1)) }\nA: El voluntario fue solicitado.\n{end}\n\n{dialogName: RequestVolunteerOnce2}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0] [pasado mañana|AMAZON.DATE -> date0]\nU: { userNlg: USetRequestVolunteer2(service=$service0, date=$date0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [cinco de la tarde|AMAZON.TIME -> time0]\nU: { userNlg: USetInformTime(time=$time0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$time0, service=$service0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse0)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse0), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse1)) }\nA: El voluntario fue solicitado.\n{end}\n\n{dialogName: RequestVolunteerOnce3}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0]\nU: { userNlg: USetRequestVolunteer1(service=$service0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=PeriodicityResponse(),arguments=[once]}]) }\nA: por única vez o recurrente?\nU: [sólo por ésta vez|once -> once0]\nU: { userNlg: USetInformOnce(once=$once0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDateResponse(),arguments=[date,starttime]},{response=RequestTimeResponse(),arguments=[starttime]},{response=RequestDateResponse(),arguments=[date]}]) }\nA: cuándo?\nU: [mañana|AMAZON.DATE -> date0]  [al mediodía|AMAZON.TIME -> time0]\nU: { userNlg: USetInformDateTime(date=$date0, time=$time0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [dos horas|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$time0, service=$service0, once=$once0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse0)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse0), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse1)) }\nA: El voluntario fue solicitado.\n{end}\n\n{dialogName: RequestVolunteerOnce4}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0] el [cuatro de agosto|AMAZON.DATE -> date0] a las [trece horas|AMAZON.TIME -> time0]\nU: { userNlg: USetRequestVolunteer3(service=$service0, date=$date0, time=$time0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: [dos horas|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$time0, service=$service0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse0)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse0), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse1)) }\nA: El voluntario fue solicitado.\n{end}\n\n{dialogName: RequestVolunteerRecurring0}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0] todos [los lunes|AMAZON.DayOfWeek -> dow0]\nU: { userNlg: USetRequestVolunteer4(service=$service0, dow=$dow0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [8 a m|AMAZON.TIME -> starttime0]\nU: { userNlg: USetInformTime(time=$starttime0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIAddDow(dow=$dow0, starttime=$starttime0, duration=$duration0, service=$service0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: sí\nU: { userNlg: InvokeAffirm() }\nA: { nlg: request(api=APIAddDow, [{response=RequestDowResponse(),arguments=[dow]}]) }\nA: qué día quiere agregar?\nU: los [martes|AMAZON.DayOfWeek -> dow1]\nU: { userNlg: USetInformDow(dow=$dow1) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [siete y media de la mañana|AMAZON.TIME -> time1]\nU: { userNlg: USetInformTime(time=$time1) }\nA: { nlg: request(api=APIAddDow, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: [dos horas|AMAZON.DURATION -> duration1]\nU: { userNlg: USetInformDuration(duration=$duration1) }\nA: { call: APIAddDow(dow=$dow1, starttime=$time1, duration=$duration1, service=$service0) -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: no\nU: { userNlg: InvokeDeny() }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestSinceResponse(),arguments=[datesince]}]) }\nA: desde qué día?\nU: desde el [primero de octubre|AMAZON.DATE -> since0]\nU: { userNlg: USetInformDateSince(date=$since0) }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestUntilResponse(),arguments=[dateuntil]}]) }\nA: hasta qué día?\nU: hasta el [31 de diciembre|AMAZON.DATE -> until0]\nU: { userNlg: USetInformDateUntil(date=$until0) }\nA: { call: APIValidateArgsRecurring(dateuntil=$until0, datesince=$since0) -> statusResponse2 HAVING ${statusResponse2.status == 0} }\nA: { nlg: notifySuccess(api=APIValidateArgsRecurring, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse2), carryover_arguments=[], requested_arguments=[]) }\nA: muy bien, voy a solicitar un voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse3 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse3)) }\nA: el voluntario ha sido solicitado\n{end}\n\n{dialogName: RequestVolunteerRecurring1}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0] todos [los lunes|AMAZON.DayOfWeek -> dow0]\nU: { userNlg: USetRequestVolunteer4(service=$service0, dow=$dow0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [7 a m|AMAZON.TIME -> time0]\nU: { userNlg: USetInformTime(time=$time0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIAddDow(dow=$dow0, starttime=$time0, duration=$duration0, service=$service0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: sí\nU: { userNlg: InvokeAffirm() }\nA: { nlg: request(api=APIAddDow, [{response=RequestDowResponse(),arguments=[dow]}]) }\nA: qué día quiere agregar?\nU: los [martes|AMAZON.DayOfWeek -> dow1] a las [7 a m|AMAZON.TIME -> time1]\nU: { userNlg: USetInformDowTime(dow=$dow1, time=$time1) }\nA: { nlg: request(api=APIAddDow, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [dos horas|AMAZON.DURATION -> duration1]\nU: { userNlg: USetInformDuration(duration=$duration1) }\nA: { call: APIAddDow(dow=$dow1, starttime=$time1, duration=$duration1, service=$service0) -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: no\nU: { userNlg: InvokeDeny() }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestSinceResponse(),arguments=[datesince]}]) }\nA: desde qué día?\nU: desde el [8 de octubre|AMAZON.DATE -> since0]\nU: { userNlg: USetInformDateSince(date=$since0) }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestUntilResponse(),arguments=[dateuntil]}]) }\nA: hasta qué día?\nU: hasta el [3 de noviembre|AMAZON.DATE -> until0]\nU: { userNlg: USetInformDateUntil(date=$until0) }\nA: { call: APIValidateArgsRecurring(dateuntil=$until0, datesince=$since0) -> statusResponse2 }\nA: { nlg: notifySuccess(api=APIValidateArgsRecurring, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse2), carryover_arguments=[], requested_arguments=[]) }\nA: muy bien, voy a solicitar un voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse3 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse3)) }\nA: el voluntario ha sido solicitado\n{end}\n\n{dialogName: RequestVolunteerRecurring2}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0] todos [los viernes|AMAZON.DayOfWeek -> dow0]\nU: { userNlg: USetRequestVolunteer4(service=$service0, dow=$dow0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [7 a m|AMAZON.TIME -> time0]\nU: { userNlg: USetInformTime(time=$time0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIAddDow(dow=$dow0, starttime=$time0, duration=$duration0, service=$service0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: no\nU: { userNlg: InvokeDeny() }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestSinceResponse(),arguments=[datesince]}]) }\nA: desde qué día?\nU: desde el [cinco de enero|AMAZON.DATE -> since0]\nU: { userNlg: USetInformDateSince(date=$since0) }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestUntilResponse(),arguments=[dateuntil]}]) }\nA: hasta qué día?\nU: hasta el [31 de marzo|AMAZON.DATE -> until0]\nU: { userNlg: USetInformDateUntil(date=$until0) }\nA: { call: APIValidateArgsRecurring(dateuntil=$until0, datesince=$since0) -> statusResponse2 }\nA: { nlg: notifySuccess(api=APIValidateArgsRecurring, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse2), carryover_arguments=[], requested_arguments=[]) }\nA: muy bien, voy a solicitar un voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse3 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse3)) }\nA: el voluntario ha sido solicitado\n{end}\n\n{dialogName: RequestVolunteerRecurring3}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0] todos [los lunes|AMAZON.DayOfWeek -> dow0]\nU: { userNlg: USetRequestVolunteer4(service=$service0, dow=$dow0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [7 a m|AMAZON.TIME -> time0]\nU: { userNlg: USetInformTime(time=$time0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIAddDow(dow=$dow0, starttime=$time0, duration=$duration0, service=$service0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: sí\nU: { userNlg: InvokeAffirm() }\nA: { nlg: request(api=APIAddDow, [{response=RequestDowResponse(),arguments=[dow,starttime,duration]},{response=RequestDowResponse(),arguments=[dow]},{response=RequestTimeResponse(),arguments=[starttime]},{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: qué día quiere agregar?\nU: los [martes|AMAZON.DayOfWeek -> dow1] desde las [7 a m|AMAZON.TIME -> time1] por [una hora|AMAZON.DURATION -> duration1]\nU: { userNlg: USetInformDowTimeDuration(dow=$dow1, time=$time1, duration=$duration1) }\nA: { call: APIAddDow(dow=$dow1, starttime=$time1, duration=$duration1, service=$service0) -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: no\nU: { userNlg: InvokeDeny() }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestSinceResponse(),arguments=[datesince]}]) }\nA: desde qué día?\nU: desde el [8 de octubre|AMAZON.DATE -> since0]\nU: { userNlg: USetInformDateSince(date=$since0) }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestUntilResponse(),arguments=[dateuntil]}]) }\nA: hasta qué día?\nU: hasta el [31 de diciembre|AMAZON.DATE -> until0]\nU: { userNlg: USetInformDateUntil(date=$until0) }\nA: { call: APIValidateArgsRecurring(dateuntil=$until0, datesince=$since0) -> statusResponse2 }\nA: { nlg: notifySuccess(api=APIValidateArgsRecurring, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse2), carryover_arguments=[], requested_arguments=[]) }\nA: muy bien, voy a solicitar un voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse3 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse3)) }\nA: el voluntario ha sido solicitado\n{end}\n\n{dialogName: RequestVolunteerRecurring4}\n{start}\nU: necesito un voluntario\nU: { userNlg: USetRequestVolunteer0() }\nA: { nlg: request(api=APIAddDow, [{response=RequestServiceResponse(),arguments=[service]}]) }\nA: para qué servicio\nU: [acompañamiento|service -> service0]\nU: { userNlg: USetInformService(service=$service0) }\nA: { nlg: request(api=APIAddDow, [{response=PeriodicityResponse(),arguments=[periodicity]}]) }\nA: lo quiere por única vez o recurrente?\nU: [recurrente|periodicity -> periodicity0]\nU: { userNlg: USetInformPeriodicity(periodicity=$periodicity0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestDowResponse(),arguments=[dow]}]) }\nA: para qué día de la semana?\nU: los [lunes|AMAZON.DayOfWeek -> dow0]\nU: { userNlg: USetInformDow(dow=$dow0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [8 a m|AMAZON.TIME -> starttime0]\nU: { userNlg: USetInformTime(time=$starttime0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [dos horas|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIAddDow(dow=$dow0, starttime=$starttime0, duration=$duration0, service=$service0, periodicity=$periodicity0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: sí\nU: { userNlg: InvokeAffirm() }\nA: { nlg: request(api=APIAddDow, [{response=RequestDowResponse(),arguments=[dow]}]) }\nA: qué día quiere agregar?\nU: los [martes|AMAZON.DayOfWeek -> dow1]\nU: { userNlg: USetInformDow(dow=$dow1) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [siete y media de la mañana|AMAZON.TIME -> time1] por [una hora|AMAZON.DURATION -> duration1]\nU: { userNlg: USetInformTimeDuration(time=$time1, duration=$duration1) }\nA: { call: APIAddDow(dow=$dow1, starttime=$time1, duration=$duration1, service=$service0, periodicity=$periodicity0) -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: no\nU: { userNlg: InvokeDeny() }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestSinceResponse(),arguments=[datesince]}]) }\nA: desde qué día?\nU: desde el [primero de octubre|AMAZON.DATE -> since0]\nU: { userNlg: USetInformDateSince(date=$since0) }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestUntilResponse(),arguments=[dateuntil]}]) }\nA: hasta qué día?\nU: hasta el [31 de diciembre|AMAZON.DATE -> until0]\nU: { userNlg: USetInformDateUntil(date=$until0) }\nA: { call: APIValidateArgsRecurring(dateuntil=$until0, datesince=$since0) -> statusResponse2 }\nA: { nlg: notifySuccess(api=APIValidateArgsRecurring, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse2), carryover_arguments=[], requested_arguments=[]) }\nA: muy bien, voy a solicitar un voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse3 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse3)) }\nA: el voluntario ha sido solicitado\n{end}\n\n{dialogName: RequestVolunteerRecurring5}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0]\nU: { userNlg: USetRequestVolunteer1(service=$service0) }\nA: { nlg: request(api=APIAddDow, [{response=PeriodicityResponse(),arguments=[periodicity]}]) }\nA: lo quiere por única vez o recurrente?\nU: [recurrente|periodicity -> periodicity0]\nU: { userNlg: USetInformPeriodicity(periodicity=$periodicity0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestDowResponse(),arguments=[dow]}]) }\nA: para qué día de la semana?\nU: los [lunes|AMAZON.DayOfWeek -> dow0]\nU: { userNlg: USetInformDow(dow=$dow0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [8 a m|AMAZON.TIME -> starttime0]\nU: { userNlg: USetInformTime(time=$starttime0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIAddDow(dow=$dow0, starttime=$starttime0, duration=$duration0, service=$service0, periodicity=$periodicity0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: sí\nU: { userNlg: InvokeAffirm() }\nA: { nlg: request(api=APIAddDow, [{response=RequestDowResponse(),arguments=[dow]}]) }\nA: qué día quiere agregar?\nU: los [martes|AMAZON.DayOfWeek -> dow1]\nU: { userNlg: USetInformDow(dow=$dow1) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [siete y media de la mañana|AMAZON.TIME -> time1]\nU: { userNlg: USetInformTime(time=$time1) }\nA: { nlg: request(api=APIAddDow, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [dos horas|AMAZON.DURATION -> duration1]\nU: { userNlg: USetInformDuration(duration=$duration1) }\nA: { call: APIAddDow(dow=$dow1, starttime=$time1, duration=$duration1, service=$service0, periodicity=$periodicity0) -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: no\nU: { userNlg: InvokeDeny() }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestSinceResponse(),arguments=[datesince]}]) }\nA: desde qué día?\nU: desde el [primero de octubre|AMAZON.DATE -> since0]\nU: { userNlg: USetInformDateSince(date=$since0) }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestUntilResponse(),arguments=[dateuntil]}]) }\nA: hasta qué día?\nU: hasta el [31 de diciembre|AMAZON.DATE -> until0]\nU: { userNlg: USetInformDateUntil(date=$until0) }\nA: { call: APIValidateArgsRecurring(dateuntil=$until0, datesince=$since0) -> statusResponse2 }\nA: { nlg: notifySuccess(api=APIValidateArgsRecurring, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse2), carryover_arguments=[], requested_arguments=[]) }\nA: muy bien, voy a solicitar un voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse3 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse3)) }\nA: el voluntario ha sido solicitado\n{end}\n\n{dialogName: RequestVolunteerOnce5}\n{start}\nU: necesito un voluntario para [pasado mañana|AMAZON.DATE -> date0]\nU: { userNlg: USetRequestVolunteer5(date=$date0) }\nA: { nlg: request(api=APIPeriodicity, [{response=RequestServiceResponse(),arguments=[service]}]) }\nA: para qué servicio?\nU: [acompañamiento|service -> service0]\nU: { userNlg: USetInformService(service=$service0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestServiceResponse(),arguments=[service]}]) }\nA: ok. a qué hora?\nU: a las [cinco de la tarde|AMAZON.TIME -> time0]\nU: { userNlg: USetInformTime(time=$time0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$time0, service=$service0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse0)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse0), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario... ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse1)) }\nA: El voluntario fue solicitado.\n{end}\n\n{dialogName: RequestVolunteerOnce0Denied0}\n{start}\nU: necesito un voluntario\nU: { userNlg: USetRequestVolunteer0() }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestServiceResponse(),arguments=[service]}]) }\nA: para qué servicio\nU: un [perro guía|service -> service0]\nU: { userNlg: USetInformService(service=$service0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=PeriodicityResponse(),arguments=[once]}]) }\nA: por única vez o recurrente\nU: [por única vez|once -> singleService0]\nU: { userNlg: USetInformOnce(once=$singleService0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDateResponse(),arguments=[date]}]) }\nA: cuándo?\nU: [mañana|AMAZON.DATE -> date0]\nU: { userNlg: USetInformDate(date=$date0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [10 a m|AMAZON.TIME -> starttime0]\nU: { userNlg: USetInformTime(time=$starttime0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo\nU: [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$starttime0, service=$service0, once=$singleService0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse0)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse0), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario... ok?\nU: no\nU: { userNlg: USetDeny() }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=reqmore(),arguments=[date,duration,service,starttime]},{response=RequestDurationResponse(),arguments=[duration]},{response=RequestDateResponse(),arguments=[date]},{response=RequestTimeResponse(),arguments=[starttime]},{response=RequestServiceResponse(),arguments=[service]}]) }\nA: que quieres cambiar?\nU: mejor que ssea el [20 de noviembre|AMAZON.DATE -> date1]\nU: { userNlg: USetDenyChangeDate(date=$date1) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date1, starttime=$starttime0, service=$service0) -> statusResponse2 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse2), carryover_arguments=[], requested_arguments=[]) }\nA: ok voy a solicitar el voluntario .. ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse1)) }\nA: El voluntario fue solicitado.\n{end}\n\n{dialogName: RequestVolunteerOnce0Denied1}\n{start}\nU: necesito un voluntario\nU: { userNlg: USetRequestVolunteer0() }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestServiceResponse(),arguments=[service]}]) }\nA: para qué servicio\nU: un [perro guía|service -> service0]\nU: { userNlg: USetInformService(service=$service0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=PeriodicityResponse(),arguments=[once]}]) }\nA: por única vez o recurrente\nU: [por única vez|once -> singleService0]\nU: { userNlg: USetInformOnce(once=$singleService0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDateResponse(),arguments=[date]}]) }\nA: cuándo?\nU: [mañana|AMAZON.DATE -> date0]\nU: { userNlg: USetInformDate(date=$date0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [10 a m|AMAZON.TIME -> starttime0]\nU: { userNlg: USetInformTime(time=$starttime0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo\nU: [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$starttime0, service=$service0, once=$singleService0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse0)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse0), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario... ok?\nU: no\nU: { userNlg: USetDeny() }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=reqmore(),arguments=[starttime]}]) }\nA: qué quieres cambiar?\nU: mejor que sea a las [quince|AMAZON.TIME -> starttime1]\nU: { userNlg: USetChangeTime(time=$starttime1) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$starttime1, service=$service0) -> statusResponse2 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse2), carryover_arguments=[], requested_arguments=[]) }\nA: ok voy a solicitar el voluntario .. ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse1)) }\nA: El voluntario fue solicitado.\n{end}\n\n{dialogName: RequestVolunteerOnce0Denied2}\n{start}\nU: necesito un voluntario\nU: { userNlg: USetRequestVolunteer0() }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestServiceResponse(),arguments=[service]}]) }\nA: para qué servicio\nU: un [perro guía|service -> service0]\nU: { userNlg: USetInformService(service=$service0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=PeriodicityResponse(),arguments=[once]}]) }\nA: por única vez o recurrente\nU: [por única vez|once -> singleService0]\nU: { userNlg: USetInformOnce(once=$singleService0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDateResponse(),arguments=[date]}]) }\nA: cuándo?\nU: [mañana|AMAZON.DATE -> date0]\nU: { userNlg: USetInformDate(date=$date0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [10 a m|AMAZON.TIME -> starttime0]\nU: { userNlg: USetInformTime(time=$starttime0) }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=RequestDurationResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo\nU: [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$starttime0, service=$service0, once=$singleService0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse0)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse0), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario... ok?\nU: no\nU: { userNlg: USetDeny() }\nA: { nlg: request(api=APIValidateArgsOnce, [{response=reqmore(),arguments=[service]}]) }\nA: qué quieres cambiar?\nU: mejor [acompañamiento|service -> service1]\nU: { userNlg: USetChangeService(service=$service1) }\nA: { call: APIValidateArgsOnce(duration=$duration0, date=$date0, starttime=$starttime0, service=$service1) -> statusResponse2 }\nA: { nlg: notifySuccess(api=APIValidateArgsOnce, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse2), carryover_arguments=[], requested_arguments=[]) }\nA: ok voy a solicitar el voluntario .. ok?\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse1)) }\nA: El voluntario fue solicitado.\n{end}\n\n{dialogName: ServicesList0}\n{start}\nU: qué servicios tengo\nU: { userNlg: USetServiceList() }\nA: { call: APIServices() -> statusResponseData0 }\nA: { nlg: notifySuccess(api=APIServices, response=ServiceListResponse(statusResponse=$statusResponseData0)) }\nA: estos son los servicios\n{end}\n\n{dialogName: ServicesHelp0}\n{start}\nU: qué servicios puedo solicitar\nU: { userNlg: USetServiceHelp() }\nA: { call: APIServicesHelp() -> statusResponseData0 }\nA: { nlg: notifySuccess(api=APIServicesHelp, response=ResponseServiceHelp(statusResponse=$statusResponseData0)) }\nA: estos son los servicios\n{end}\n\n{dialogName: RequestVolunteerRecurringFailed1}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0] todos [los viernes|AMAZON.DayOfWeek -> dow0]\nU: { userNlg: USetRequestVolunteer4(service=$service0, dow=$dow0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [7 a m|AMAZON.TIME -> time0]\nU: { userNlg: USetInformTime(time=$time0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIAddDow(dow=$dow0, starttime=$time0, duration=$duration0, service=$service0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: no\nU: { userNlg: InvokeDeny() }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestSinceResponse(),arguments=[datesince]}]) }\nA: desde qué día?\nU: desde el [cinco de enero|AMAZON.DATE -> since0]\nU: { userNlg: USetInformDateSince(date=$since0) }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestUntilResponse(),arguments=[dateuntil]}]) }\nA: hasta qué día?\nU: hasta el [31 de marzo|AMAZON.DATE -> until0]\nU: { userNlg: USetInformDateUntil(date=$until0) }\nA: { call: APIValidateArgsRecurring(dateuntil=$until0, datesince=$since0) -> statusResponse2 HAVING ${statusResponse2.status == 1} }\nA: { nlg: notifyFailure(api=APIValidateArgsRecurring, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: requestAlternative(response=ConfirmRequestResponse(statusResponse=$statusResponse2), arguments=[datesince]) }\nA: lo lamento la fecha no puede ser anterior. desde que fecha?\nU: desde el [seis de enero|AMAZON.DATE -> since1]\nU: { userNlg: USetInformDateSince(date=$since1) }\nA: { call: APIValidateArgsRecurring(dateuntil=$until0, datesince=$since1) -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIValidateArgsRecurring, response=ConfirmRequestResponse(statusResponse=$statusResponse1)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse1), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario...\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse3 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse3)) }\nA: el voluntario ha sido solicitado\n{end}\n\n{dialogName: RequestVolunteerRecurringFailed2}\n{start}\nU: necesito un voluntario para [acompañamiento|service -> service0] todos [los viernes|AMAZON.DayOfWeek -> dow0]\nU: { userNlg: USetRequestVolunteer4(service=$service0, dow=$dow0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[starttime]}]) }\nA: a qué hora?\nU: a las [7 a m|AMAZON.TIME -> time0]\nU: { userNlg: USetInformTime(time=$time0) }\nA: { nlg: request(api=APIAddDow, [{response=RequestTimeResponse(),arguments=[duration]}]) }\nA: por cuánto tiempo?\nU: por [una hora|AMAZON.DURATION -> duration0]\nU: { userNlg: USetInformDuration(duration=$duration0) }\nA: { call: APIAddDow(dow=$dow0, starttime=$time0, duration=$duration0, service=$service0) -> statusResponse0 }\nA: { nlg: notifySuccess(api=APIAddDow, response=NewDowResponse()) }\nA: quiere agregar otro día de la semana?\nU: no\nU: { userNlg: InvokeDeny() }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestSinceResponse(),arguments=[datesince]}]) }\nA: desde qué día?\nU: desde el [cinco de enero|AMAZON.DATE -> since0]\nU: { userNlg: USetInformDateSince(date=$since0) }\nA: { nlg: request(api=APIValidateArgsRecurring, [{response=RequestUntilResponse(),arguments=[dateuntil]}]) }\nA: hasta qué día?\nU: hasta el [31 de marzo|AMAZON.DATE -> until0]\nU: { userNlg: USetInformDateUntil(date=$until0) }\nA: { call: APIValidateArgsRecurring(dateuntil=$until0, datesince=$since0) -> statusResponse2 HAVING ${statusResponse2.status == 2} }\nA: { nlg: notifyFailure(api=APIValidateArgsRecurring, response=ConfirmRequestResponse(statusResponse=$statusResponse2)) }\nA: { nlg: requestAlternative(response=ConfirmRequestResponse(statusResponse=$statusResponse2), arguments=[dateuntil]) }\nA: lo lamento la fecha no puede ser anterior. hasta que fecha?\nU: hasta el [20 de marzo|AMAZON.DATE -> until1]\nU: { userNlg: USetInformDateUntil(date=$until1) }\nA: { call: APIValidateArgsRecurring(dateuntil=$until1, datesince=$since0) -> statusResponse1 }\nA: { nlg: notifySuccess(api=APIValidateArgsRecurring, response=ConfirmRequestResponse(statusResponse=$statusResponse1)) }\nA: { nlg: offer(api=APIRequestVolunteer, response=ConfirmRequestResponse(statusResponse=$statusResponse1), carryover_arguments=[], requested_arguments=[]) }\nA: ok. voy a solicitar el voluntario...\nU: sí\nU: { userNlg: USetAffirm() }\nA: { call: APIRequestVolunteer() -> statusResponse3 }\nA: { nlg: notifySuccess(api=APIRequestVolunteer, response=RequestConfirmedResponse(statusResponse=$statusResponse3)) }\nA: el voluntario ha sido solicitado\n{end}\n\n",
    "UserUtteranceGroup": {
        "USetInformDateUntil": {
            "args": {
                "date": "AMAZON.DATE"
            },
            "formatters": [
                "${date}",
                "el ${date}",
                "hasta el ${date}",
                "hasta ${date}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetInformDateSince": {
            "args": {
                "date": "AMAZON.DATE"
            },
            "formatters": [
                "el ${date}",
                "${date}",
                "comenzando ${date}",
                "desde ${date}",
                "comenzando el ${date}",
                "desde el ${date}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetServiceHelp": {
            "args": {},
            "formatters": [
                "qué voluntarios hay",
                "qué voluntario puedo solicitar",
                "cuáles son los servicios",
                "qué servicios hay",
                "qué servicios tengo disponibles",
                "qué servicios puedo solicitar"
            ],
            "dialogAct": "invoke",
            "api": null
        },
        "USetServiceList": {
            "args": {},
            "formatters": [
                "qué servicios tengo",
                "qué voluntarios solicité",
                "dime mis solicitudes",
                "qué tengo pedido",
                "dime mis servicios"
            ],
            "dialogAct": "invoke",
            "api": null
        },
        "USetInformTimeDuration": {
            "args": {
                "time": "AMAZON.TIME",
                "duration": "AMAZON.DURATION"
            },
            "formatters": [
                "desde ${time} por ${duration}",
                "desde ${time} durante ${duration}",
                "desde las ${time} por ${duration}",
                "desde las ${time} durante ${duration}",
                "de ${time} por ${duration}",
                "de ${time} durante ${duration}",
                "de las ${time} por ${duration}",
                "de las ${time} durante ${duration}",
                "a las ${time} por ${duration}",
                "a las ${time} durante ${duration}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetChangeService": {
            "args": {
                "service": "service"
            },
            "formatters": [
                "mejor cámbialo por un ${service}",
                "mejor cámbialo por ${service}",
                "mejor que sea un ${service}",
                "mejor que sea ${service}",
                "mejor pide un ${service}",
                "mejor pide ${service}",
                "mejor hazlo por un ${service}",
                "mejor hazlo por ${service}",
                "mejor un ${service}",
                "mejor ${service}",
                "cámbialo por un ${service}",
                "cámbialo por ${service}",
                "que sea un ${service}",
                "que sea ${service}",
                "pide un ${service}",
                "pide ${service}",
                "hazlo por un ${service}",
                "hazlo por ${service}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetChangeTime": {
            "args": {
                "time": "AMAZON.TIME"
            },
            "formatters": [
                "mejor cámbialo a las ${time}",
                "mejor que sea a las ${time}",
                "mejor pídelo a las ${time}",
                "mejor hazlo a las ${time}",
                "mejor a las ${time}",
                "cámbialo a las ${time}",
                "que sea a las ${time}",
                "pídelo a las ${time}",
                "hazlo a las ${time}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetDenyChangeDate": {
            "args": {
                "date": "AMAZON.DATE"
            },
            "formatters": [
                "mejor cámbialo para el ${date}",
                "mejor cámbialo para ${date}",
                "mejor cámbialo el ${date}",
                "mejor cámbialo ${date}",
                "mejor que sea para el ${date}",
                "mejor que sea para ${date}",
                "mejor que sea el ${date}",
                "mejor que sea ${date}",
                "mejor pídelo para el ${date}",
                "mejor pídelo para ${date}",
                "mejor pídelo el ${date}",
                "mejor pídelo ${date}",
                "mejor hazlo para el ${date}",
                "mejor hazlo para ${date}",
                "mejor hazlo el ${date}",
                "mejor hazlo ${date}",
                "mejor para el ${date}",
                "mejor para ${date}",
                "mejor el ${date}",
                "mejor ${date}",
                "cámbialo para el ${date}",
                "cámbialo para ${date}",
                "cámbialo el ${date}",
                "cámbialo ${date}",
                "que sea para el ${date}",
                "que sea para ${date}",
                "que sea el ${date}",
                "que sea ${date}",
                "pídelo para el ${date}",
                "pídelo para ${date}",
                "pídelo el ${date}",
                "pídelo ${date}",
                "hazlo para el ${date}",
                "hazlo para ${date}",
                "hazlo el ${date}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetInformOnce": {
            "args": {
                "once": "once"
            },
            "formatters": [
                "${once}",
                "lo quiero ${once}",
                "lo necesito ${once}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "InvokeDeny": {
            "args": {},
            "formatters": [
                "no",
                "para nada",
                "no gracias",
                "no ya está bien"
            ],
            "dialogAct": "invoke",
            "api": null
        },
        "InvokeAffirm": {
            "args": {},
            "formatters": [
                "perfecto",
                "está bien",
                "hazlo",
                "vamos",
                "vale",
                "ok",
                "sí"
            ],
            "dialogAct": "invoke",
            "api": null
        },
        "USetRequestVolunteer5": {
            "args": {
                "date": "AMAZON.DATE"
            },
            "formatters": [
                "necesito un voluntario para ${date}",
                "quiero un voluntario el ${date}",
                "necesito un voluntario el ${date}"
            ],
            "dialogAct": "invoke",
            "api": null
        },
        "USetInformDowTimeDuration": {
            "args": {
                "dow": "AMAZON.DayOfWeek",
                "time": "AMAZON.TIME",
                "duration": "AMAZON.DURATION"
            },
            "formatters": [
                "${dow} desde ${time} por ${duration}",
                "${dow} desde ${time} durante ${duration}",
                "${dow} desde las ${time} por ${duration}",
                "${dow} desde las ${time} durante ${duration}",
                "${dow} de ${time} por ${duration}",
                "${dow} de ${time} durante ${duration}",
                "${dow} de las ${time} por ${duration}",
                "${dow} de las ${time} durante ${duration}",
                "los ${dow} desde ${time} por ${duration}",
                "los ${dow} desde ${time} durante ${duration}",
                "los ${dow} desde las ${time} por ${duration}",
                "los ${dow} desde las ${time} durante ${duration}",
                "los ${dow} de ${time} por ${duration}",
                "los ${dow} de ${time} durante ${duration}",
                "los ${dow} de las ${time} por ${duration}",
                "los ${dow} de las ${time} durante ${duration}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetInformPeriodicity": {
            "args": {
                "periodicity": "periodicity"
            },
            "formatters": [
                "${periodicity}",
                "lo quiero ${periodicity}",
                "lo necesito ${periodicity}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetInformDowTimeEndTime": {
            "args": {
                "dow": "AMAZON.DayOfWeek",
                "time": "AMAZON.TIME",
                "endtime": "AMAZON.TIME"
            },
            "formatters": [
                "${dow} desde ${time} hasta ${endtime}",
                "${dow} desde ${time} hasta las ${endtime}",
                "${dow} desde ${time} a ${endtime}",
                "${dow} desde ${time} a las ${endtime}",
                "${dow} desde las ${time} hasta ${endtime}",
                "${dow} desde las ${time} hasta las ${endtime}",
                "${dow} desde las ${time} a ${endtime}",
                "${dow} desde las ${time} a las ${endtime}",
                "${dow} de ${time} hasta ${endtime}",
                "${dow} de ${time} hasta las ${endtime}",
                "${dow} de ${time} a ${endtime}",
                "${dow} de ${time} a las ${endtime}",
                "${dow} de las ${time} hasta ${endtime}",
                "${dow} de las ${time} hasta las ${endtime}",
                "${dow} de las ${time} a ${endtime}",
                "${dow} de las ${time} a las ${endtime}",
                "los ${dow} desde ${time} hasta ${endtime}",
                "los ${dow} desde ${time} hasta las ${endtime}",
                "los ${dow} desde ${time} a ${endtime}",
                "los ${dow} desde ${time} a las ${endtime}",
                "los ${dow} desde las ${time} hasta ${endtime}",
                "los ${dow} desde las ${time} hasta las ${endtime}",
                "los ${dow} desde las ${time} a ${endtime}",
                "los ${dow} desde las ${time} a las ${endtime}",
                "los ${dow} de ${time} hasta ${endtime}",
                "los ${dow} de ${time} hasta las ${endtime}",
                "los ${dow} de ${time} a ${endtime}",
                "los ${dow} de ${time} a las ${endtime}",
                "los ${dow} de las ${time} hasta ${endtime}",
                "los ${dow} de las ${time} hasta las ${endtime}",
                "los ${dow} de las ${time} a ${endtime}",
                "los ${dow} de las ${time} a las ${endtime}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetInformDowTime": {
            "args": {
                "dow": "AMAZON.DayOfWeek",
                "time": "AMAZON.TIME"
            },
            "formatters": [
                "todos los ${dow} a las ${time}",
                "los ${dow} a las ${time}",
                "${dow} ${time}",
                "${dow} a las ${time}",
                "a las ${time} los ${dow}",
                "a las ${time} todos los ${dow}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetDeny": {
            "args": {},
            "formatters": [
                "no",
                "para nada",
                "no gracias",
                "no ya está bien"
            ],
            "dialogAct": "deny",
            "api": null
        },
        "USetInformDow": {
            "args": {
                "dow": "AMAZON.DayOfWeek"
            },
            "formatters": [
                "todos los ${dow}",
                "los ${dow}",
                "${dow}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetRequestVolunteer4": {
            "args": {
                "service": "service",
                "dow": "AMAZON.DayOfWeek"
            },
            "formatters": [
                "necesito un voluntario para ${service} los ${dow}",
                "necesito un ${service} los ${dow}",
                "necesito un voluntario con un ${service} los ${dow}",
                "necesito un ${service} todos los ${dow}",
                "necesito un voluntario para ${service} todos los ${dow}",
                "quiero un voluntario para ${service} los ${dow}",
                "quiero un ${service} los ${dow}",
                "quiero un voluntario con un ${service} los ${dow}",
                "quiero un ${service} todos los ${dow}",
                "quiero un voluntario para ${service} todos los ${dow}",
                "preciso un voluntario para ${service} los ${dow}",
                "preciso un ${service} los ${dow}",
                "preciso un voluntario con un ${service} los ${dow}",
                "preciso un ${service} todos los ${dow}",
                "preciso un voluntario para ${service} todos los ${dow}",
                "pide un voluntario para ${service} los ${dow}",
                "pide un ${service} los ${dow}",
                "pide un voluntario con un ${service} los ${dow}",
                "pide un ${service} todos los ${dow}",
                "pide un voluntario para ${service} todos los ${dow}",
                "${service} todos los ${dow}",
                "${service} los ${dow}"
            ],
            "dialogAct": "invoke",
            "api": null
        },
        "USetRequestVolunteer3": {
            "args": {
                "service": "service",
                "date": "AMAZON.DATE",
                "time": "AMAZON.TIME"
            },
            "formatters": [
                "necesito un voluntario para ${service} el ${date} a las ${time}",
                "preciso un voluntario para ${service} ${date} a las ${time}",
                "quiero ${service} ${date} a las ${time}",
                "pide un voluntario para ${service} el ${date} a las ${time}",
                "quiero un voluntario para ${service} el ${date} a las ${time}",
                "necesito un voluntario para ${service} ${date} a las ${time}",
                "preciso un ${service} ${date} a las ${time}",
                "quiero un ${service} ${date} a las ${time}",
                "pide un ${service} el ${date} a las ${time}",
                "quiero un ${service} el ${date} a las ${time}",
                "necesito un ${service} ${date} a las ${time}"
            ],
            "dialogAct": "invoke",
            "api": null
        },
        "USetInformDateTime": {
            "args": {
                "date": "AMAZON.DATE",
                "time": "AMAZON.TIME"
            },
            "formatters": [
                "el ${date} a las ${time}",
                "a las ${time} de ${date}",
                "a las ${time} del ${date}",
                "${date} a las ${time}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetRequestVolunteer2": {
            "args": {
                "service": "service",
                "date": "AMAZON.DATE"
            },
            "formatters": [
                "quiero un voluntario para ${service} ${date}",
                "quiero un voluntario para ${service} el ${date}",
                "necesito un ${service} para el ${date}",
                "necesito un ${service} el ${date}",
                "pide un ${service} para el ${date}",
                "pide un ${service} para ${date}",
                "necesito un voluntario para ${service} ${date}"
            ],
            "dialogAct": "invoke",
            "api": null
        },
        "USetRequestVolunteer1": {
            "args": {
                "service": "service"
            },
            "formatters": [
                "${service}",
                "pídeme un ${service}",
                "necesito ${service}",
                "necesito un ${service}",
                "pide un voluntario para ${service}",
                "quiero ${service}"
            ],
            "dialogAct": "invoke",
            "api": null
        },
        "USetAffirm": {
            "args": {},
            "formatters": [
                "perfecto",
                "está bien",
                "hazlo",
                "vamos",
                "vale",
                "ok",
                "sí"
            ],
            "dialogAct": "affirm",
            "api": null
        },
        "USetInformDuration": {
            "args": {
                "duration": "AMAZON.DURATION"
            },
            "formatters": [
                "${duration}",
                "durante ${duration}",
                "por ${duration}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetInformTime": {
            "args": {
                "time": "AMAZON.TIME"
            },
            "formatters": [
                "${time}",
                "a las ${time}",
                "a ${time}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetInformDate": {
            "args": {
                "date": "AMAZON.DATE"
            },
            "formatters": [
                "el ${date}",
                "para el ${date}",
                "para ${date}",
                "${date}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetInformService": {
            "args": {
                "service": "service"
            },
            "formatters": [
                "quiero ${service}",
                "un ${service}",
                "para ${service}",
                "${service}",
                "necesito ${service}"
            ],
            "dialogAct": "inform",
            "api": null
        },
        "USetRequestVolunteer0": {
            "args": {},
            "formatters": [
                "quiero solicitar un voluntario",
                "quiero un voluntario",
                "pide un voluntario",
                "quiero pedir un voluntario",
                "necesito un voluntario",
                "solicita un voluntario"
            ],
            "dialogAct": "invoke",
            "api": null
        },
        "welcome": {
            "args": {},
            "formatters": [
                "let's get started"
            ],
            "dialogAct": "invoke",
            "api": "welcome"
        }
    },
    "ActionAndEntity": {
        "APIs": {
            "APIRequestVolunteer": {
                "args": {},
                "returns": "StatusResponse",
                "nlg": []
            },
            "APIPeriodicity": {
                "args": {
                    "service": {
                        "type": "service",
                        "optional": "True"
                    },
                    "periodicity": {
                        "type": "periodicity",
                        "optional": "True"
                    },
                    "date": {
                        "type": "AMAZON.DATE",
                        "optional": "True"
                    },
                    "dow": {
                        "type": "AMAZON.DayOfWeek",
                        "optional": "True"
                    },
                    "time": {
                        "type": "AMAZON.TIME",
                        "optional": "True"
                    }
                },
                "returns": "PeriodicityResponse",
                "nlg": []
            },
            "APIValidateArgsRecurring": {
                "args": {
                    "dateuntil": {
                        "type": "AMAZON.DATE",
                        "optional": "True"
                    },
                    "datesince": {
                        "type": "AMAZON.DATE",
                        "optional": "True"
                    }
                },
                "returns": "StatusResponse",
                "nlg": []
            },
            "APIAddDow": {
                "args": {
                    "dow": {
                        "type": "AMAZON.DayOfWeek"
                    },
                    "starttime": {
                        "type": "AMAZON.TIME"
                    },
                    "duration": {
                        "type": "AMAZON.DURATION"
                    },
                    "service": {
                        "type": "service"
                    },
                    "periodicity": {
                        "type": "periodicity",
                        "optional": "True"
                    }
                },
                "returns": "StatusResponse",
                "nlg": []
            },
            "APIValidateArgsOnce": {
                "args": {
                    "duration": {
                        "type": "AMAZON.DURATION"
                    },
                    "date": {
                        "type": "AMAZON.DATE"
                    },
                    "starttime": {
                        "type": "AMAZON.TIME"
                    },
                    "service": {
                        "type": "service"
                    },
                    "once": {
                        "type": "once",
                        "optional": "True"
                    }
                },
                "returns": "StatusResponse",
                "nlg": []
            },
            "APIServices": {
                "args": {},
                "returns": "StatusResponseData",
                "nlg": []
            },
            "APIServicesHelp": {
                "args": {},
                "returns": "StatusResponseData",
                "nlg": []
            }
        },
        "Types": {
            "StatusResponse": {
                "properties": {
                    "message": "AMAZON.Book",
                    "status": "AMAZON.NUMBER"
                }
            },
            "PeriodicityResponse": {
                "properties": {
                    "service": "service",
                    "periodicity": "periodicity",
                    "dow": "AMAZON.DayOfWeek",
                    "time": "AMAZON.TIME",
                    "date": "AMAZON.DATE"
                }
            },
            "StatusResponseData": {
                "properties": {
                    "status": "AMAZON.NUMBER",
                    "message": "AMAZON.Book",
                    "data": "List<AMAZON.Book>"
                }
            },
            "service": {
                "extends": "AMAZON.Literal"
            },
            "periodicity": {
                "extends": "AMAZON.Literal"
            },
            "once": {
                "extends": "AMAZON.Literal"
            }
        }
    },
    "RawDialogs": "",
    "UserNlg": {},
    "Catalog": {},
    "SimulatorConfig": {},
    "Language": {}
}