namespace dialogs

import apis.APIAddDow
import apis.APIRequestVolunteer
import apis.APIValidateArgsOnce
import apis.APIValidateArgsRecurring
import com.amazon.alexa.ask.conversations.Affirm
import com.amazon.alexa.ask.conversations.Deny
import com.amazon.alexa.ask.conversations.Inform
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.MultiModalResponse
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Offer
import com.amazon.alexa.ask.conversations.Request
import com.amazon.alexa.ask.conversations.RequestArguments
import com.amazon.alexa.ask.conversations.ensure
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.schema.Nothing
import prompts.ConfirmRequestPrompt
import prompts.NewDowPrompt
import prompts.RequestConfirmedPrompt
import prompts.RequestDatePrompt
import prompts.RequestDowPrompt
import prompts.RequestDurationPrompt
import prompts.RequestServicePrompt
import prompts.RequestSincePrompt
import prompts.RequestTimePrompt
import prompts.RequestUntilPrompt
import types.PAYLOAD_TYPE1
import types.PAYLOAD_TYPE10
import types.PAYLOAD_TYPE11
import types.PAYLOAD_TYPE12
import types.PAYLOAD_TYPE13
import types.PAYLOAD_TYPE14
import types.PAYLOAD_TYPE16
import types.PAYLOAD_TYPE17
import types.PAYLOAD_TYPE19
import types.PAYLOAD_TYPE2
import types.PAYLOAD_TYPE20
import types.PAYLOAD_TYPE5
import types.PAYLOAD_TYPE6
import types.PAYLOAD_TYPE7
import types.PAYLOAD_TYPE8
import types.PAYLOAD_TYPE9
import utterances.USetAffirm
import utterances.USetDeny
import utterances.USetInformDate
import utterances.USetInformDow
import utterances.USetInformDowTime
import utterances.USetInformDowTimeDuration
import utterances.USetInformDuration
import utterances.USetInformService
import utterances.USetInformTime
import utterances.USetInformTimeAndDuration
import utterances.USetRequestVolunteer0
import utterances.USetRequestVolunteer1
import utterances.USetRequestVolunteer2
import utterances.USetRequestVolunteer3
import utterances.USetRequestVolunteer4
import utterances.USetRequestVolunteer5
import utterances.USetRequestVolunteer6

dialog Nothing dialogName_RequestVolunteerRecurring2() {
  sample {
    USetRequestVolunteer6Request = expect(
      act = Invoke,
      event = USetRequestVolunteer6
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.since
        ]
      },
      response = MultiModalResponse {
        apla = RequestSincePrompt
      }
    )
    USetInformDateRequest = expect(
      act = Inform,
      event = USetInformDate
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.until
        ]
      },
      response = MultiModalResponse {
        apla = RequestUntilPrompt
      }
    )
    USetInformDateRequest0 = expect(
      act = Inform,
      event = USetInformDate
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIAddDow.arguments.dow
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIAddDow.arguments.time
          ]
        }
      ]
    )
    statusResponseType2 = APIAddDow(
      duration = USetInformDurationRequest.duration,
      time = USetRequestVolunteer6Request.time,
      dow = USetRequestVolunteer6Request.dow
    )
    response(
      act = Notify {
        success = true,
        actionName = APIAddDow
      },
      response = MultiModalResponse {
        apla = NewDowPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIAddDow
      }
    )
    expect(
      act = Deny,
      event = USetDeny
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.service
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.dow
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.time
          ]
        }
      ]
    )
    statusResponseType0 = APIValidateArgsRecurring(
      duration = USetInformDurationRequest.duration,
      service = USetRequestVolunteer6Request.service,
      until = USetInformDateRequest0.date,
      time = USetRequestVolunteer6Request.time,
      dow = USetRequestVolunteer6Request.dow,
      since = USetInformDateRequest.date
    )
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsRecurring
      },
      payload = PAYLOAD_TYPE1 {
        statusResponse = statusResponseType0
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIRequestVolunteer
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    statusResponseType1 = APIRequestVolunteer()
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE2 {
        statusResponse = statusResponseType1
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialogName_RequestVolunteerRecurring3() {
  sample {
    USetRequestVolunteer6Request = expect(
      act = Invoke,
      event = USetRequestVolunteer6
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.service,
          APIValidateArgsRecurring.arguments.until,
          APIValidateArgsRecurring.arguments.since,
          APIValidateArgsRecurring.arguments.dow,
          APIValidateArgsRecurring.arguments.time,
          APIValidateArgsRecurring.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.service
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestUntilPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.until
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestSincePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.since
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.dow
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.time
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.duration
          ]
        }
      ]
    )
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.since
        ]
      },
      response = MultiModalResponse {
        apla = RequestSincePrompt
      }
    )
    USetInformDateRequest = expect(
      act = Inform,
      event = USetInformDate
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.until
        ]
      },
      response = MultiModalResponse {
        apla = RequestUntilPrompt
      }
    )
    USetInformDateRequest3 = expect(
      act = Inform,
      event = USetInformDate
    )
    statusResponseType2 = APIAddDow(
      duration = USetInformDurationRequest.duration,
      time = USetRequestVolunteer6Request.time,
      dow = USetRequestVolunteer6Request.dow
    )
    response(
      act = Notify {
        success = true,
        actionName = APIAddDow
      },
      response = MultiModalResponse {
        apla = NewDowPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIAddDow
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    response(
      act = Request {
        arguments = [
          APIAddDow.arguments.dow,
          APIAddDow.arguments.time,
          APIAddDow.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDowPrompt
      }
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIAddDow.arguments.dow
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIAddDow.arguments.time
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIAddDow.arguments.duration
          ]
        }
      ]
    )
    USetInformDowTimeRequest = expect(
      act = Inform,
      event = USetInformDowTime
    )
    response(
      act = Request {
        arguments = [
          APIAddDow.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    USetInformDurationRequest4 = expect(
      act = Inform,
      event = USetInformDuration
    )
    statusResponseType3 = APIAddDow(
      duration = USetInformDurationRequest4.duration,
      time = USetInformDowTimeRequest.time,
      dow = USetInformDowTimeRequest.dow
    )
    response(
      act = Notify {
        success = true,
        actionName = APIAddDow
      },
      response = MultiModalResponse {
        apla = NewDowPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIAddDow
      }
    )
    expect(
      act = Deny,
      event = USetDeny
    )
    statusResponseType0 = APIValidateArgsRecurring(
      duration = USetInformDurationRequest.duration,
      service = USetRequestVolunteer6Request.service,
      until = USetInformDateRequest3.date,
      time = USetRequestVolunteer6Request.time,
      dow = USetRequestVolunteer6Request.dow,
      since = USetInformDateRequest.date
    )
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsRecurring
      },
      payload = PAYLOAD_TYPE5 {
        statusResponse = statusResponseType0
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIRequestVolunteer
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    statusResponseType1 = APIRequestVolunteer()
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE6 {
        statusResponse = statusResponseType1
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialogName_RequestVolunteerOnce0() {
  sample {
    USetRequestVolunteer1Request = expect(
      act = Invoke,
      event = USetRequestVolunteer1
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    USetInformTimeAndDurationRequest = expect(
      act = Inform,
      event = USetInformTimeAndDuration
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.duration
          ]
        }
      ]
    )
    statusResponseType1 = APIValidateArgsOnce(
      date = USetRequestVolunteer1Request.date,
      duration = USetInformTimeAndDurationRequest.duration,
      service = USetRequestVolunteer1Request.service,
      time = USetInformTimeAndDurationRequest.time
    )
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsOnce
      },
      payload = PAYLOAD_TYPE7 {
        statusResponse = statusResponseType1
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIRequestVolunteer
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    statusResponseType0 = APIRequestVolunteer()
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE8 {
        statusResponse = statusResponseType0
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialogName_RequestVolunteerOnce1() {
  sample {
    expect(
      act = Invoke,
      event = USetRequestVolunteer0
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.service
        ]
      },
      response = MultiModalResponse {
        apla = RequestServicePrompt
      }
    )
    USetInformServiceRequest = expect(
      act = Inform,
      event = USetInformService
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.date
        ]
      },
      response = MultiModalResponse {
        apla = RequestDatePrompt
      }
    )
    USetInformDateRequest = expect(
      act = Inform,
      event = USetInformDate
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    USetInformTimeRequest = expect(
      act = Inform,
      event = USetInformTime
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    statusResponseType1 = APIValidateArgsOnce(
      date = USetInformDateRequest.date,
      duration = USetInformDurationRequest.duration,
      service = USetInformServiceRequest.service,
      time = USetInformTimeRequest.time
    )
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsOnce
      },
      payload = PAYLOAD_TYPE9 {
        statusResponse = statusResponseType1
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIRequestVolunteer
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    statusResponseType0 = APIRequestVolunteer()
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE10 {
        statusResponse = statusResponseType0
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialogName_RequestVolunteerOnce2() {
  sample {
    USetRequestVolunteer2Request = expect(
      act = Invoke,
      event = USetRequestVolunteer2
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.time
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.duration
          ]
        }
      ]
    )
    statusResponseType1 = APIValidateArgsOnce(
      date = USetRequestVolunteer2Request.date,
      duration = USetRequestVolunteer2Request.duration,
      service = USetRequestVolunteer2Request.service,
      time = USetRequestVolunteer2Request.time
    )
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsOnce
      },
      payload = PAYLOAD_TYPE11 {
        statusResponse = statusResponseType1
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIRequestVolunteer
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    statusResponseType0 = APIRequestVolunteer()
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE12 {
        statusResponse = statusResponseType0
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialogName_RequestVolunteerOnce3() {
  sample {
    USetRequestVolunteer3Request = expect(
      act = Invoke,
      event = USetRequestVolunteer3
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.time
          ]
        }
      ]
    )
    statusResponseType1 = APIValidateArgsOnce(
      date = USetRequestVolunteer3Request.date,
      duration = USetInformDurationRequest.duration,
      service = USetRequestVolunteer3Request.service,
      time = USetRequestVolunteer3Request.time
    )
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsOnce
      },
      payload = PAYLOAD_TYPE13 {
        statusResponse = statusResponseType1
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIRequestVolunteer
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    statusResponseType0 = APIRequestVolunteer()
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE14 {
        statusResponse = statusResponseType0
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialogName_RequestVolunteerRecurring0() {
  sample {
    USetRequestVolunteer4Request = expect(
      act = Invoke,
      event = USetRequestVolunteer4
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    USetInformTimeRequest = expect(
      act = Inform,
      event = USetInformTime
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.since
        ]
      },
      response = MultiModalResponse {
        apla = RequestSincePrompt
      }
    )
    USetInformDateRequest = expect(
      act = Inform,
      event = USetInformDate
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.until
        ]
      },
      response = MultiModalResponse {
        apla = RequestUntilPrompt
      }
    )
    USetInformDateRequest15 = expect(
      act = Inform,
      event = USetInformDate
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIAddDow.arguments.dow
          ]
        }
      ]
    )
    statusResponseType2 = APIAddDow(
      duration = USetInformDurationRequest.duration,
      time = USetInformTimeRequest.time,
      dow = USetRequestVolunteer4Request.dow
    )
    response(
      act = Notify {
        success = true,
        actionName = APIAddDow
      },
      response = MultiModalResponse {
        apla = NewDowPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIAddDow
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    response(
      act = Request {
        arguments = [
          APIAddDow.arguments.dow,
          APIAddDow.arguments.duration,
          APIAddDow.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestDowPrompt
      }
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIAddDow.arguments.dow
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIAddDow.arguments.time
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIAddDow.arguments.duration
          ]
        }
      ]
    )
    USetInformDowTimeDurationRequest = expect(
      act = Inform,
      event = USetInformDowTimeDuration
    )
    statusResponseType3 = APIAddDow(
      duration = USetInformDowTimeDurationRequest.duration,
      time = USetInformDowTimeDurationRequest.time,
      dow = USetInformDowTimeDurationRequest.dow
    )
    response(
      act = Notify {
        success = true,
        actionName = APIAddDow
      },
      response = MultiModalResponse {
        apla = NewDowPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIAddDow
      }
    )
    expect(
      act = Deny,
      event = USetDeny
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.service
          ]
        }
      ]
    )
    statusResponseType0 = APIValidateArgsRecurring(
      duration = USetInformDurationRequest.duration,
      service = USetRequestVolunteer4Request.service,
      until = USetInformDateRequest15.date,
      time = USetInformTimeRequest.time,
      dow = USetRequestVolunteer4Request.dow,
      since = USetInformDateRequest.date
    )
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsRecurring
      },
      payload = PAYLOAD_TYPE16 {
        statusResponse = statusResponseType0
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIRequestVolunteer
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    statusResponseType1 = APIRequestVolunteer()
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE17 {
        statusResponse = statusResponseType1
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialogName_RequestVolunteerRecurring1() {
  sample {
    USetRequestVolunteer5Request = expect(
      act = Invoke,
      event = USetRequestVolunteer5
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.service
        ]
      },
      response = MultiModalResponse {
        apla = RequestServicePrompt
      }
    )
    USetInformServiceRequest = expect(
      act = Inform,
      event = USetInformService
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    USetInformTimeRequest = expect(
      act = Inform,
      event = USetInformTime
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.since
        ]
      },
      response = MultiModalResponse {
        apla = RequestSincePrompt
      }
    )
    USetInformDateRequest = expect(
      act = Inform,
      event = USetInformDate
    )
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.until
        ]
      },
      response = MultiModalResponse {
        apla = RequestUntilPrompt
      }
    )
    USetInformDateRequest18 = expect(
      act = Inform,
      event = USetInformDate
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIAddDow.arguments.dow
          ]
        }
      ]
    )
    statusResponseType2 = APIAddDow(
      duration = USetInformDurationRequest.duration,
      time = USetInformTimeRequest.time,
      dow = USetRequestVolunteer5Request.dow
    )
    response(
      act = Notify {
        success = true,
        actionName = APIAddDow
      },
      response = MultiModalResponse {
        apla = NewDowPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIAddDow
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    response(
      act = Request {
        arguments = [
          APIAddDow.arguments.dow,
          APIAddDow.arguments.duration,
          APIAddDow.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestDowPrompt
      }
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIAddDow.arguments.dow
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIAddDow.arguments.time
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIAddDow.arguments.duration
          ]
        }
      ]
    )
    USetInformDowRequest = expect(
      act = Inform,
      event = USetInformDow
    )
    response(
      act = Request {
        arguments = [
          APIAddDow.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    USetInformTimeAndDurationRequest = expect(
      act = Inform,
      event = USetInformTimeAndDuration
    )
    statusResponseType3 = APIAddDow(
      duration = USetInformTimeAndDurationRequest.duration,
      time = USetInformTimeAndDurationRequest.time,
      dow = USetInformDowRequest.dow
    )
    response(
      act = Notify {
        success = true,
        actionName = APIAddDow
      },
      response = MultiModalResponse {
        apla = NewDowPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIAddDow
      }
    )
    expect(
      act = Deny,
      event = USetDeny
    )
    statusResponseType0 = APIValidateArgsRecurring(
      duration = USetInformDurationRequest.duration,
      service = USetInformServiceRequest.service,
      until = USetInformDateRequest18.date,
      time = USetInformTimeRequest.time,
      dow = USetRequestVolunteer5Request.dow,
      since = USetInformDateRequest.date
    )
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsRecurring
      },
      payload = PAYLOAD_TYPE19 {
        statusResponse = statusResponseType0
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        arguments = [
          
        ],
        actionName = APIRequestVolunteer
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    statusResponseType1 = APIRequestVolunteer()
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE20 {
        statusResponse = statusResponseType1
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}
