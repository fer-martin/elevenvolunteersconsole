namespace dialogs

import apis.APIRequestVolunteer
import com.amazon.alexa.ask.conversations.Affirm
import com.amazon.alexa.ask.conversations.ConfirmAction
import com.amazon.alexa.ask.conversations.Inform
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.MultiModalResponse
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Request
import com.amazon.alexa.ask.conversations.RequestArguments
import com.amazon.alexa.ask.conversations.ensure
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.schema.Nothing
import prompts.ConfirmRequestPrompt
import prompts.RequestConfirmedPrompt
import prompts.RequestDatePrompt
import prompts.RequestDurationPrompt
import prompts.RequestServicePrompt
import prompts.RequestTimePrompt
import types.PAYLOAD_TYPE0
import types.PAYLOAD_TYPE1
import types.PAYLOAD_TYPE2
import types.PAYLOAD_TYPE3
import types.PAYLOAD_TYPE4
import types.PAYLOAD_TYPE5
import utterances.USetAffirm
import utterances.USetInformDate
import utterances.USetInformDuration
import utterances.USetInformService
import utterances.USetInformTime
import utterances.USetInformTimeAndDuration
import utterances.USetRequestVolunteer0
import utterances.USetRequestVolunteer1
import utterances.USetVolunteer2

dialog Nothing dialogName_RequestVolunteer2() {
  sample {
    USetVolunteer2Request = expect(
      act = Invoke,
      event = USetVolunteer2
    )
    response(
      act = ConfirmAction {
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE0 {
        date = USetVolunteer2Request.date,
        duration = USetVolunteer2Request.duration,
        service = USetVolunteer2Request.service,
        time = USetVolunteer2Request.time
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.service
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.date
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.time
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.duration
          ]
        }
      ]
    )
    volunteerRequest0 = APIRequestVolunteer(
      date = USetVolunteer2Request.date,
      duration = USetVolunteer2Request.duration,
      service = USetVolunteer2Request.service,
      time = USetVolunteer2Request.time
    )
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE1 {
        volunteerRequest = volunteerRequest0
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialogName_RequestVolunteer1() {
  sample {
    USetRequestVolunteer1Request = expect(
      act = Invoke,
      event = USetRequestVolunteer1
    )
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    USetInformTimeRequest = expect(
      act = Inform,
      event = USetInformTime
    )
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    response(
      act = ConfirmAction {
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE2 {
        date = USetRequestVolunteer1Request.date,
        duration = USetInformDurationRequest.duration,
        service = USetRequestVolunteer1Request.service,
        time = USetInformTimeRequest.time
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.service
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.date
          ]
        }
      ]
    )
    volunteerRequest0 = APIRequestVolunteer(
      date = USetRequestVolunteer1Request.date,
      duration = USetInformDurationRequest.duration,
      service = USetRequestVolunteer1Request.service,
      time = USetInformTimeRequest.time
    )
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE3 {
        volunteerRequest = volunteerRequest0
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialogName_RequestVolunteer0() {
  sample {
    expect(
      act = Invoke,
      event = USetRequestVolunteer0
    )
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.service
        ]
      },
      response = MultiModalResponse {
        apla = RequestServicePrompt
      }
    )
    USetInformServiceRequest = expect(
      act = Inform,
      event = USetInformService
    )
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.date
        ]
      },
      response = MultiModalResponse {
        apla = RequestDatePrompt
      }
    )
    USetInformDateRequest = expect(
      act = Inform,
      event = USetInformDate
    )
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.duration,
          APIRequestVolunteer.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.time
          ]
        }
      ]
    )
    ensure(
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.duration
          ]
        }
      ]
    )
    USetInformTimeAndDurationRequest = expect(
      act = Inform,
      event = USetInformTimeAndDuration
    )
    response(
      act = ConfirmAction {
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE4 {
        date = USetInformDateRequest.date,
        duration = USetInformTimeAndDurationRequest.duration,
        service = USetInformServiceRequest.service,
        time = USetInformTimeAndDurationRequest.time
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      }
    )
    expect(
      act = Affirm,
      event = USetAffirm
    )
    volunteerRequest0 = APIRequestVolunteer(
      date = USetInformDateRequest.date,
      duration = USetInformTimeAndDurationRequest.duration,
      service = USetInformServiceRequest.service,
      time = USetInformTimeAndDurationRequest.time
    )
    response(
      act = Notify {
        success = true,
        actionName = APIRequestVolunteer
      },
      payload = PAYLOAD_TYPE5 {
        volunteerRequest = volunteerRequest0
      },
      response = MultiModalResponse {
        apla = RequestConfirmedPrompt
      }
    )
  }
}
